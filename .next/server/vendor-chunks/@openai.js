"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@openai";
exports.ids = ["vendor-chunks/@openai"];
exports.modules = {

/***/ "(ssr)/./node_modules/@openai/chatkit-react/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@openai/chatkit-react/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatKit: () => (/* binding */ ChatKit),\n/* harmony export */   useChatKit: () => (/* binding */ useChatKit)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n// src/ChatKit.tsx\n\n\nvar ChatKit = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function ChatKit2({ control, ...htmlProps }, forwardedRef) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n      const el = ref.current;\n      if (!el) return;\n      if (customElements.get(\"openai-chatkit\")) {\n        el.setOptions(control.options);\n        return;\n      }\n      let active = true;\n      customElements.whenDefined(\"openai-chatkit\").then(() => {\n        if (active) {\n          el.setOptions(control.options);\n        }\n      });\n      return () => {\n        active = false;\n      };\n    }, [control.options]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"openai-chatkit\",\n      {\n        ref: (chatKit) => {\n          ref.current = chatKit;\n          control.setInstance(chatKit);\n          if (typeof forwardedRef === \"function\") {\n            forwardedRef(chatKit);\n          } else if (forwardedRef) {\n            forwardedRef.current = chatKit;\n          }\n          if (!ref.current) {\n            return;\n          }\n          const events = {\n            \"chatkit.error\": \"onError\",\n            \"chatkit.response.end\": \"onResponseEnd\",\n            \"chatkit.response.start\": \"onResponseStart\",\n            \"chatkit.log\": \"onLog\",\n            \"chatkit.thread.change\": \"onThreadChange\",\n            \"chatkit.thread.load.start\": \"onThreadLoadStart\",\n            \"chatkit.thread.load.end\": \"onThreadLoadEnd\"\n          };\n          const eventNames = Object.keys(events);\n          for (const event of eventNames) {\n            ref.current.addEventListener(event, (e) => {\n              const handler = control.handlers[events[event]];\n              if (typeof handler === \"function\") {\n                handler(e.detail);\n              }\n            });\n          }\n        },\n        ...htmlProps\n      }\n    );\n  }\n);\n\n// src/useChatKit.ts\n\n\n// src/useStableOptions.ts\n\nfunction isPlainObjectOrArray(obj) {\n  return obj !== null && typeof obj === \"object\" && [null, Object.prototype].includes(Object.getPrototypeOf(obj)) || Array.isArray(obj);\n}\nfunction deepEqualIgnoringFns(a, b, seen = /* @__PURE__ */ new WeakMap()) {\n  if (Object.is(a, b)) return true;\n  if (typeof a === \"function\" && typeof b === \"function\") {\n    return typeof a === typeof b;\n  }\n  if (!isPlainObjectOrArray(a) || !isPlainObjectOrArray(b)) {\n    return false;\n  }\n  const mapped = seen.get(a);\n  if (mapped && mapped === b) return true;\n  seen.set(a, b);\n  if (Array.isArray(a) || Array.isArray(b)) {\n    if (!Array.isArray(a) || !Array.isArray(b) || a.length !== b.length)\n      return false;\n    for (let i = 0; i < a.length; i++) {\n      if (!deepEqualIgnoringFns(a[i], b[i], seen)) return false;\n    }\n    return true;\n  }\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) return false;\n  for (let i = 0; i < aKeys.length; i++) {\n    const k = aKeys[i];\n    if (!Object.prototype.hasOwnProperty.call(b, k)) return false;\n    const av = a[k];\n    const bv = b[k];\n    if (!deepEqualIgnoringFns(av, bv, seen)) return false;\n  }\n  return true;\n}\nfunction withLatestFunctionWrappers(ref) {\n  const path = [];\n  const getByPath = (root, p) => p.reduce((acc, k) => acc == null ? acc : acc[k], root);\n  const wrap = (parentPath, key) => {\n    return (...args) => {\n      const latestParent = getByPath(ref.current, parentPath);\n      const latestFn = latestParent?.[key];\n      if (typeof latestFn === \"function\") {\n        return latestFn.apply(latestParent, args);\n      }\n    };\n  };\n  const visit = (v) => {\n    if (typeof v === \"function\") {\n      const key = path[path.length - 1];\n      const parentPath = path.slice(0, -1);\n      return wrap(parentPath, key);\n    }\n    if (Array.isArray(v)) {\n      const base = path.length;\n      const out = new Array(v.length);\n      for (let i = 0; i < v.length; i++) {\n        path[base] = i;\n        out[i] = visit(v[i]);\n      }\n      path.length = base;\n      return out;\n    }\n    if (v && typeof v === \"object\") {\n      const base = path.length;\n      const out = {};\n      for (const k of Object.keys(v)) {\n        path[base] = k;\n        out[k] = visit(v[k]);\n      }\n      path.length = base;\n      return out;\n    }\n    return v;\n  };\n  return visit(ref.current);\n}\nfunction useStableOptions(options) {\n  const latestOptions = react__WEBPACK_IMPORTED_MODULE_0__.useRef(options);\n  latestOptions.current = options;\n  const cache = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  if (!cache.current || !deepEqualIgnoringFns(cache.current.snapshot, options)) {\n    cache.current = {\n      snapshot: options,\n      shaped: withLatestFunctionWrappers(latestOptions)\n    };\n  }\n  return cache.current.shaped;\n}\n\n// src/useChatKit.ts\nvar CHATKIT_METHOD_NAMES = Object.freeze([\n  \"focusComposer\",\n  \"setThreadId\",\n  \"sendUserMessage\",\n  \"setComposerValue\",\n  \"fetchUpdates\",\n  \"sendCustomAction\"\n]);\nfunction useChatKit(options) {\n  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const stableOptions = useStableOptions(options);\n  const methods = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return CHATKIT_METHOD_NAMES.reduce((acc, key) => {\n      acc[key] = (...args) => {\n        if (!ref.current) {\n          console.warn(\"ChatKit element is not mounted\");\n          return;\n        }\n        return ref.current[key](...args);\n      };\n      return acc;\n    }, {});\n  }, []);\n  const setInstance = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (instance) => {\n      ref.current = instance;\n    },\n    []\n  );\n  const control = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const options2 = {};\n    const handlers = {};\n    for (const [key, value] of Object.entries(stableOptions)) {\n      if (/^on[A-Z]/.test(key) && key !== \"onClientTool\") {\n        handlers[key] = value;\n      } else {\n        options2[key] = value;\n      }\n    }\n    return {\n      setInstance,\n      options: options2,\n      handlers\n    };\n  }, [stableOptions, setInstance]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => ({ ...methods, control, ref }),\n    [methods, control]\n  );\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@openai/chatkit-react/dist/index.js\n");

/***/ })

};
;